Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 175, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 127, in train
    self.save()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 161, in save
    os.makedirs(savepath, exist_ok=True)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/os.py", line 213, in makedirs
    makedirs(head, exist_ok=exist_ok)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/os.py", line 213, in makedirs
    makedirs(head, exist_ok=exist_ok)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/os.py", line 213, in makedirs
    makedirs(head, exist_ok=exist_ok)
  [Previous line repeated 5 more times]
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/os.py", line 223, in makedirs
    mkdir(name, mode)
PermissionError: [Errno 13] Permission denied: '/home/aajay'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 151, in main
    diffusion = diffusion_config(model)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 308, in __init__
    self.inv_model = nn.Sequential(
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 308, in __init__
    self.inv_model = nn.Sequential(
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 523, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 490, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 151, in main
    diffusion = diffusion_config(model)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 307, in __init__
    device = self.model.device
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1265, in __getattr__
    raise AttributeError("'{}' object has no attribute '{}'".format(
AttributeError: 'MLPnet' object has no attribute 'device'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 151, in main
    diffusion = diffusion_config(model)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 311, in __init__
    self.text_cond = self.clip_model.encode_text(clip.tokenize('the man is hopping'))
  File "/home/yanyangji/.local/lib/python3.8/site-packages/clip/model.py", line 344, in encode_text
    x = self.token_embedding(text).type(self.dtype)  # [batch_size, n_ctx, d_model]
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/sparse.py", line 160, in forward
    return F.embedding(
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/functional.py", line 2210, in embedding
    return torch.embedding(weight, input, padding_idx, scale_grad_by_freq, sparse)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument index in method wrapper__index_select)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 357, in forward
    print(cond.shape)
AttributeError: 'dict' object has no attribute 'shape'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 359, in forward
    t = self.time_mlp(time)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 359, in forward
    t = self.time_mlp(time)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 359, in forward
    t = self.time_mlp(time)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 371, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 371, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 371, in forward
    inp = torch.cat([t, cond, x], dim=-1)
TypeError: expected Tensor as element 1 in argument 0, but got dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 175, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss = loss / self.gradient_accumulate_every
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss = loss / self.gradient_accumulate_every
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
RuntimeError: Tensors must have same number of dimensions: got 2 and 3
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 149, in main
    model = model_config()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 347, in __init__
    nn.Linear(1024, self.action_dim),
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 96, in __init__
    self.weight = Parameter(torch.empty((out_features, in_features), **factory_kwargs))
RuntimeError: Trying to create tensor with negative dimension -11: [-11, 1024]
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    breakpoint()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    breakpoint()
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 370, in forward
    out  = self.mlp(inp)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 370, in forward
    out  = self.mlp(inp)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 163, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 369, in forward
    inp = torch.cat([t, cond, x], dim=-1)
RuntimeError: Tensors must have same number of dimensions: got 2 and 3
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 175, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 175, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss = loss / self.gradient_accumulate_every
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 536, in loss
    x_t = x[:, :-1, self.action_dim:]
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 505, in p_losses
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 505, in p_losses
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 149, in main
    model = model_config()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 332, in __init__
    if self.returns_condition:
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 332, in __init__
    if self.returns_condition:
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 150, in main
    model = model_config()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 177, in __init__
    ResidualTemporalBlock(dim_in, dim_out, embed_dim=embed_dim, horizon=horizon, kernel_size=kernel_size, mish=mish),
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 95, in __init__
    Rearrange(),
TypeError: __init__() missing 1 required positional argument: 'pattern'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 231, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 109, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 109, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 232, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 68, in forward
    return self.block(x)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 313, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 309, in _conv_forward
    return F.conv1d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [128, 14, 5], expected input[1, 11, 100] to have 14 channels, but got 11 channels instead
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 230, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 68, in forward
    return self.block(x)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 313, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 309, in _conv_forward
    return F.conv1d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [128, 14, 5], expected input[1, 11, 100] to have 14 channels, but got 11 channels instead
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 230, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 68, in forward
    return self.block(x)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 313, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 309, in _conv_forward
    return F.conv1d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [128, 14, 5], expected input[1, 11, 100] to have 14 channels, but got 11 channels instead
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 499, in p_losses
    x_noisy = apply_conditioning(x_noisy, cond, 0)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 94, in apply_conditioning
    for t, val in conditions.items():
AttributeError: 'Tensor' object has no attribute 'items'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 230, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 68, in forward
    return self.block(x)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 313, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 309, in _conv_forward
    return F.conv1d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [128, 14, 5], expected input[1, 11, 100] to have 14 channels, but got 11 channels instead
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 225, in forward
    x = resnet(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 103, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 103, in forward
    out = self.blocks[0](x) + self.time_mlp(t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 238, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x) + self.time_mlp(t) + self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x128 and 256x128)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 240, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 109, in forward
    c = self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x128 and 256x128)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 239, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 109, in forward
    c = self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x128 and 256x128)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 240, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 109, in forward
    c = self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x128 and 256x128)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 228, in forward
    if self.returns_condition:
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
TypeError: forward() missing 1 required positional argument: 'cond'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 240, in forward
    x = resnet2(x, t)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 110, in forward
    out = self.blocks[1](out)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 110, in forward
    out = self.blocks[1](out)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 239, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 110, in forward
    out = self.blocks[1](out)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 110, in forward
    out = self.blocks[1](out)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 117, in train
    loss, infos = self.model.loss(*batch)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 143, in train
    self.inv_render_samples()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 285, in inv_render_samples
    conditions = apply_dict(
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/arrays.py", line 69, in apply_dict
    for k, v in d.items()
AttributeError: 'Tensor' object has no attribute 'items'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 143, in train
    self.inv_render_samples()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 300, in inv_render_samples
    samples = self.ema_model.conditional_sample(conditions, returns=returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 481, in conditional_sample
    return self.p_sample_loop(shape, cond, returns, *args, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 457, in p_sample_loop
    x = self.p_sample(x, cond, timesteps, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 438, in p_sample
    model_mean, _, model_log_variance = self.p_mean_variance(x=x, cond=cond, t=t, returns=returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 417, in p_mean_variance
    epsilon_cond = self.model(x, cond, t, returns, use_dropout=False)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 234, in forward
    t = torch.cat([t, returns_embed], dim=-1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 11 but got size 2 for tensor number 1 in the list.
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 143, in train
    self.inv_render_samples()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 300, in inv_render_samples
    samples = self.ema_model.conditional_sample(conditions, returns=returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 481, in conditional_sample
    return self.p_sample_loop(shape, cond, returns, *args, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 457, in p_sample_loop
    x = self.p_sample(x, cond, timesteps, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 438, in p_sample
    model_mean, _, model_log_variance = self.p_mean_variance(x=x, cond=cond, t=t, returns=returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 417, in p_mean_variance
    epsilon_cond = self.model(x, cond, t, returns, use_dropout=False)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 235, in forward
    t = torch.cat([t, returns_embed], dim=-1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 11 but got size 2 for tensor number 1 in the list.
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 143, in train
    self.inv_render_samples()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 300, in inv_render_samples
    samples = self.ema_model.conditional_sample(conditions, returns=returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 481, in conditional_sample
    return self.p_sample_loop(shape, cond, returns, *args, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 457, in p_sample_loop
    x = self.p_sample(x, cond, timesteps, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 438, in p_sample
    model_mean, _, model_log_variance = self.p_mean_variance(x=x, cond=cond, t=t, returns=returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 417, in p_mean_variance
    epsilon_cond = self.model(x, cond, t, returns, use_dropout=False)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 234, in forward
    t = torch.cat([t, returns_embed], dim=-1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 11 but got size 2 for tensor number 1 in the list.
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 176, in main
    trainer.train(n_train_steps=Config.n_steps_per_epoch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 143, in train
    self.inv_render_samples()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/training.py", line 300, in inv_render_samples
    samples = self.ema_model.conditional_sample(conditions, returns=returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 481, in conditional_sample
    return self.p_sample_loop(shape, cond, returns, *args, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 457, in p_sample_loop
    x = self.p_sample(x, cond, timesteps, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 438, in p_sample
    model_mean, _, model_log_variance = self.p_mean_variance(x=x, cond=cond, t=t, returns=returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 417, in p_mean_variance
    epsilon_cond = self.model(x, cond, t, returns, use_dropout=False)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 234, in forward
    t = torch.cat([t, returns_embed], dim=-1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 11 but got size 2 for tensor number 1 in the list.
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 499, in p_losses
    x_noisy = apply_conditioning(x_noisy, cond, 0)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/helpers.py", line 95, in apply_conditioning
    x[:, t, action_dim:] = val.clone() # batch size, time step, trajectory (all observation)
AttributeError: 'numpy.ndarray' object has no attribute 'clone'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 224, in forward
    c = self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
TypeError: linear(): argument 'input' (position 1) must be Tensor, not dict
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 227, in forward
    if self.returns_condition:
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 227, in forward
    if self.returns_condition:
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 238, in forward
    if use_dropout:
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 238, in forward
    if use_dropout:
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 150, in main
    model = model_config()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 151, in __init__
    if self.returns_condition:
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1265, in __getattr__
    raise AttributeError("'{}' object has no attribute '{}'".format(
AttributeError: 'TemporalUnet' object has no attribute 'returns_condition'
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 534, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 501, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 250, in forward
    x = resnet(x, t, c)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 108, in forward
    out = self.blocks[0](x) + self.time_mlp(t) + self.cond_mlp(cond)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x256 and 128x128)
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 164, in main
    loss, _ = diffusion.loss(*batch)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 528, in loss
    diffuse_loss, info = self.p_losses(x[:, :, self.action_dim:], cond, t, returns)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/diffusion.py", line 495, in p_losses
    x_recon = self.model(x_noisy, cond, t, returns)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 252, in forward
    c = self.cond_mlp(self.text_feats.expand(x.size(0), -1))
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: mat1 and mat2 must have the same dtype
Traceback (most recent call last):
  File "/home/yanyangji/anaconda3/envs/decdiff/lib/python3.8/site-packages/ml_logger/__init__.py", line 203, in thunk
    results = fn(*(args or ARGS), **_KWARGS)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/scripts/train.py", line 150, in main
    model = model_config()
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/utils/config.py", line 65, in __call__
    instance = self._class(*args, **kwargs, **self._dict)
  File "/home/yanyangji/research/RL/final/decision-diffuser/code/diffuser/models/temporal.py", line 158, in __init__
    clip_model, _ = clip.load("ViT-B/32", device=Config.device).float()
AttributeError: 'tuple' object has no attribute 'float'
